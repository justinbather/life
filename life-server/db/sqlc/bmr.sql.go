// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bmr.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBmr = `-- name: CreateBmr :one
INSERT INTO bmr (created_at, total_calories, num_workouts) 
	VALUES ($1, $2, $3)
	RETURNING id, user_id, created_at, total_calories, num_workouts
`

type CreateBmrParams struct {
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	TotalCalories int32            `json:"total_calories"`
	NumWorkouts   int32            `json:"num_workouts"`
}

func (q *Queries) CreateBmr(ctx context.Context, arg CreateBmrParams) (Bmr, error) {
	row := q.db.QueryRow(ctx, createBmr, arg.CreatedAt, arg.TotalCalories, arg.NumWorkouts)
	var i Bmr
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.TotalCalories,
		&i.NumWorkouts,
	)
	return i, err
}

const getBmrById = `-- name: GetBmrById :one
SELECT id, user_id, created_at, total_calories, num_workouts FROM bmr WHERE id = $1
`

func (q *Queries) GetBmrById(ctx context.Context, id int32) (Bmr, error) {
	row := q.db.QueryRow(ctx, getBmrById, id)
	var i Bmr
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.TotalCalories,
		&i.NumWorkouts,
	)
	return i, err
}

const getBmrFromDateRange = `-- name: GetBmrFromDateRange :many
SELECT id, user_id, created_at, total_calories, num_workouts FROM bmr WHERE user_id = $1 AND created_at BETWEEN $2 AND $3
`

type GetBmrFromDateRangeParams struct {
	UserID      string           `json:"user_id"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	CreatedAt_2 pgtype.Timestamp `json:"created_at_2"`
}

func (q *Queries) GetBmrFromDateRange(ctx context.Context, arg GetBmrFromDateRangeParams) ([]Bmr, error) {
	rows, err := q.db.Query(ctx, getBmrFromDateRange, arg.UserID, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bmr
	for rows.Next() {
		var i Bmr
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.TotalCalories,
			&i.NumWorkouts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
