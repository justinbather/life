// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workouts.sql

package sqlc

import (
	"context"
)

const createWorkout = `-- name: CreateWorkout :exec
INSERT INTO workout (type, username, duration, calories_burned, workload, description)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateWorkoutParams struct {
	Type           string  `json:"type"`
	Username       string  `json:"username"`
	Duration       int64   `json:"duration"`
	CaloriesBurned int64   `json:"calories_burned"`
	Workload       int64   `json:"workload"`
	Description    *string `json:"description"`
}

func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) error {
	_, err := q.exec(ctx, q.createWorkoutStmt, createWorkout,
		arg.Type,
		arg.Username,
		arg.Duration,
		arg.CaloriesBurned,
		arg.Workload,
		arg.Description,
	)
	return err
}

const getAllWorkouts = `-- name: GetAllWorkouts :many
SELECT id, username, type, created_at, duration, calories_burned, workload, description FROM workout WHERE username = ?
`

func (q *Queries) GetAllWorkouts(ctx context.Context, username string) ([]Workout, error) {
	rows, err := q.query(ctx, q.getAllWorkoutsStmt, getAllWorkouts, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Type,
			&i.CreatedAt,
			&i.Duration,
			&i.CaloriesBurned,
			&i.Workload,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkoutsByType = `-- name: GetWorkoutsByType :many
SELECT id, username, type, created_at, duration, calories_burned, workload, description FROM workout WHERE username = ? AND type = ?
`

type GetWorkoutsByTypeParams struct {
	Username string `json:"username"`
	Type     string `json:"type"`
}

func (q *Queries) GetWorkoutsByType(ctx context.Context, arg GetWorkoutsByTypeParams) ([]Workout, error) {
	rows, err := q.query(ctx, q.getWorkoutsByTypeStmt, getWorkoutsByType, arg.Username, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Type,
			&i.CreatedAt,
			&i.Duration,
			&i.CaloriesBurned,
			&i.Workload,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkoutsFromDateRange = `-- name: GetWorkoutsFromDateRange :many
SELECT id, username, type, created_at, duration, calories_burned, workload, description
FROM workout
WHERE username = ? AND created_at BETWEEN ? AND ?
`

func (q *Queries) GetWorkoutsFromDateRange(ctx context.Context, username string) ([]Workout, error) {
	rows, err := q.query(ctx, q.getWorkoutsFromDateRangeStmt, getWorkoutsFromDateRange, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Type,
			&i.CreatedAt,
			&i.Duration,
			&i.CaloriesBurned,
			&i.Workload,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
