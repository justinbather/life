// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workouts.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO workout (type, user_id, duration, calories_burned, workload, description)
	VALUES ($1, $2, $3, $4, $5, $6) 
	RETURNING id, user_id, type, created_at, duration, calories_burned, workload, description
`

type CreateWorkoutParams struct {
	Type           string  `json:"type"`
	UserID         string  `json:"user_id"`
	Duration       int32   `json:"duration"`
	CaloriesBurned int32   `json:"calories_burned"`
	Workload       int32   `json:"workload"`
	Description    *string `json:"description"`
}

type CreateWorkoutRow struct {
	ID             int32            `json:"id"`
	UserID         string           `json:"user_id"`
	Type           string           `json:"type"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	Duration       int32            `json:"duration"`
	CaloriesBurned int32            `json:"calories_burned"`
	Workload       int32            `json:"workload"`
	Description    *string          `json:"description"`
}

func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (CreateWorkoutRow, error) {
	row := q.db.QueryRow(ctx, createWorkout,
		arg.Type,
		arg.UserID,
		arg.Duration,
		arg.CaloriesBurned,
		arg.Workload,
		arg.Description,
	)
	var i CreateWorkoutRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.CreatedAt,
		&i.Duration,
		&i.CaloriesBurned,
		&i.Workload,
		&i.Description,
	)
	return i, err
}

const getAllWorkouts = `-- name: GetAllWorkouts :many
SELECT id, type, created_at, duration, calories_burned, workload, description, user_id FROM workout WHERE user_id = $1
`

func (q *Queries) GetAllWorkouts(ctx context.Context, userID string) ([]Workout, error) {
	rows, err := q.db.Query(ctx, getAllWorkouts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.CreatedAt,
			&i.Duration,
			&i.CaloriesBurned,
			&i.Workload,
			&i.Description,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkoutsByType = `-- name: GetWorkoutsByType :many
SELECT id, type, created_at, duration, calories_burned, workload, description, user_id FROM workout WHERE user_id = $1 AND type = $2
`

type GetWorkoutsByTypeParams struct {
	UserID string `json:"user_id"`
	Type   string `json:"type"`
}

func (q *Queries) GetWorkoutsByType(ctx context.Context, arg GetWorkoutsByTypeParams) ([]Workout, error) {
	rows, err := q.db.Query(ctx, getWorkoutsByType, arg.UserID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.CreatedAt,
			&i.Duration,
			&i.CaloriesBurned,
			&i.Workload,
			&i.Description,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkoutsFromDateRange = `-- name: GetWorkoutsFromDateRange :many
SELECT id, type, created_at, duration, calories_burned, workload, description, user_id FROM workout WHERE user_id = $1 AND created_at BETWEEN $2 AND $3
`

type GetWorkoutsFromDateRangeParams struct {
	UserID      string           `json:"user_id"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	CreatedAt_2 pgtype.Timestamp `json:"created_at_2"`
}

func (q *Queries) GetWorkoutsFromDateRange(ctx context.Context, arg GetWorkoutsFromDateRangeParams) ([]Workout, error) {
	rows, err := q.db.Query(ctx, getWorkoutsFromDateRange, arg.UserID, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.CreatedAt,
			&i.Duration,
			&i.CaloriesBurned,
			&i.Workload,
			&i.Description,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
