// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workouts.sql

package sqlc

import (
	"context"
)

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO workout (type) VALUES ($1) RETURNING id, type
`

func (q *Queries) CreateWorkout(ctx context.Context, type_ string) (Workout, error) {
	row := q.db.QueryRow(ctx, createWorkout, type_)
	var i Workout
	err := row.Scan(&i.ID, &i.Type)
	return i, err
}

const getWorkoutsByType = `-- name: GetWorkoutsByType :many
SELECT id, type FROM workout WHERE type = $1
`

func (q *Queries) GetWorkoutsByType(ctx context.Context, type_ string) ([]Workout, error) {
	rows, err := q.db.Query(ctx, getWorkoutsByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(&i.ID, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
