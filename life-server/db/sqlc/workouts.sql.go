// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workouts.sql

package sqlc

import (
	"context"
)

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO workout (type, duration, calories_burned, workload, description)
	VALUES ($1, $2, $3, $4, $5) 
	RETURNING id, type, created_at, duration, calories_burned, workload, description
`

type CreateWorkoutParams struct {
	Type           string  `json:"type"`
	Duration       int32   `json:"duration"`
	CaloriesBurned int32   `json:"calories_burned"`
	Workload       int32   `json:"workload"`
	Description    *string `json:"description"`
}

func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (Workout, error) {
	row := q.db.QueryRow(ctx, createWorkout,
		arg.Type,
		arg.Duration,
		arg.CaloriesBurned,
		arg.Workload,
		arg.Description,
	)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.CreatedAt,
		&i.Duration,
		&i.CaloriesBurned,
		&i.Workload,
		&i.Description,
	)
	return i, err
}

const getAllWorkouts = `-- name: GetAllWorkouts :many
SELECT id, type, created_at, duration, calories_burned, workload, description FROM workout
`

func (q *Queries) GetAllWorkouts(ctx context.Context) ([]Workout, error) {
	rows, err := q.db.Query(ctx, getAllWorkouts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.CreatedAt,
			&i.Duration,
			&i.CaloriesBurned,
			&i.Workload,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkoutsByType = `-- name: GetWorkoutsByType :many
SELECT id, type, created_at, duration, calories_burned, workload, description FROM workout WHERE type = $1
`

func (q *Queries) GetWorkoutsByType(ctx context.Context, type_ string) ([]Workout, error) {
	rows, err := q.db.Query(ctx, getWorkoutsByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.CreatedAt,
			&i.Duration,
			&i.CaloriesBurned,
			&i.Workload,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
