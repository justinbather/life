// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: meals.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMeal = `-- name: CreateMeal :one
INSERT INTO meal (type, username, calories, protein, carbs, fat, description, date) 
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
	RETURNING id, username, type, calories, protein, carbs, fat, description, date
`

type CreateMealParams struct {
	Type        string           `json:"type"`
	Username    string           `json:"username"`
	Calories    int32            `json:"calories"`
	Protein     int32            `json:"protein"`
	Carbs       int32            `json:"carbs"`
	Fat         int32            `json:"fat"`
	Description *string          `json:"description"`
	Date        pgtype.Timestamp `json:"date"`
}

func (q *Queries) CreateMeal(ctx context.Context, arg CreateMealParams) (Meal, error) {
	row := q.db.QueryRow(ctx, createMeal,
		arg.Type,
		arg.Username,
		arg.Calories,
		arg.Protein,
		arg.Carbs,
		arg.Fat,
		arg.Description,
		arg.Date,
	)
	var i Meal
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Type,
		&i.Calories,
		&i.Protein,
		&i.Carbs,
		&i.Fat,
		&i.Description,
		&i.Date,
	)
	return i, err
}

const getMealById = `-- name: GetMealById :one
SELECT id, username, type, calories, protein, carbs, fat, description, date FROM meal WHERE id = $1
`

func (q *Queries) GetMealById(ctx context.Context, id int32) (Meal, error) {
	row := q.db.QueryRow(ctx, getMealById, id)
	var i Meal
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Type,
		&i.Calories,
		&i.Protein,
		&i.Carbs,
		&i.Fat,
		&i.Description,
		&i.Date,
	)
	return i, err
}

const getMealsByType = `-- name: GetMealsByType :many
SELECT id, username, type, calories, protein, carbs, fat, description, date FROM meal WHERE username = $1 and type = $2
`

type GetMealsByTypeParams struct {
	Username string `json:"username"`
	Type     string `json:"type"`
}

func (q *Queries) GetMealsByType(ctx context.Context, arg GetMealsByTypeParams) ([]Meal, error) {
	rows, err := q.db.Query(ctx, getMealsByType, arg.Username, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meal
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Type,
			&i.Calories,
			&i.Protein,
			&i.Carbs,
			&i.Fat,
			&i.Description,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMealsFromDateRange = `-- name: GetMealsFromDateRange :many
SELECT id, username, type, calories, protein, carbs, fat, description, date FROM meal WHERE username = $1 AND date BETWEEN $2 AND $3
`

type GetMealsFromDateRangeParams struct {
	Username string           `json:"username"`
	Date     pgtype.Timestamp `json:"date"`
	Date_2   pgtype.Timestamp `json:"date_2"`
}

func (q *Queries) GetMealsFromDateRange(ctx context.Context, arg GetMealsFromDateRangeParams) ([]Meal, error) {
	rows, err := q.db.Query(ctx, getMealsFromDateRange, arg.Username, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meal
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Type,
			&i.Calories,
			&i.Protein,
			&i.Carbs,
			&i.Fat,
			&i.Description,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
