// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: meals.sql

package sqlc

import (
	"context"
)

const createMeal = `-- name: CreateMeal :exec
INSERT INTO meal (type, username, calories, protein, carbs, fat, description, date) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateMealParams struct {
	Type        string  `json:"type"`
	Username    string  `json:"username"`
	Calories    int64   `json:"calories"`
	Protein     int64   `json:"protein"`
	Carbs       int64   `json:"carbs"`
	Fat         int64   `json:"fat"`
	Description *string `json:"description"`
	Date        string  `json:"date"`
}

func (q *Queries) CreateMeal(ctx context.Context, arg CreateMealParams) error {
	_, err := q.exec(ctx, q.createMealStmt, createMeal,
		arg.Type,
		arg.Username,
		arg.Calories,
		arg.Protein,
		arg.Carbs,
		arg.Fat,
		arg.Description,
		arg.Date,
	)
	return err
}

const getMealById = `-- name: GetMealById :one
SELECT id, username, type, calories, protein, carbs, fat, description, date FROM meal WHERE id = ?
`

func (q *Queries) GetMealById(ctx context.Context, id int64) (Meal, error) {
	row := q.queryRow(ctx, q.getMealByIdStmt, getMealById, id)
	var i Meal
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Type,
		&i.Calories,
		&i.Protein,
		&i.Carbs,
		&i.Fat,
		&i.Description,
		&i.Date,
	)
	return i, err
}

const getMealsByType = `-- name: GetMealsByType :many
SELECT id, username, type, calories, protein, carbs, fat, description, date FROM meal WHERE username = ? AND type = ?
`

type GetMealsByTypeParams struct {
	Username string `json:"username"`
	Type     string `json:"type"`
}

func (q *Queries) GetMealsByType(ctx context.Context, arg GetMealsByTypeParams) ([]Meal, error) {
	rows, err := q.query(ctx, q.getMealsByTypeStmt, getMealsByType, arg.Username, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meal
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Type,
			&i.Calories,
			&i.Protein,
			&i.Carbs,
			&i.Fat,
			&i.Description,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMealsFromDateRange = `-- name: GetMealsFromDateRange :many
SELECT id, username, type, calories, protein, carbs, fat, description, date FROM meal WHERE username = ? AND date BETWEEN ? AND ?
`

func (q *Queries) GetMealsFromDateRange(ctx context.Context, username string) ([]Meal, error) {
	rows, err := q.query(ctx, q.getMealsFromDateRangeStmt, getMealsFromDateRange, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meal
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Type,
			&i.Calories,
			&i.Protein,
			&i.Carbs,
			&i.Fat,
			&i.Description,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
